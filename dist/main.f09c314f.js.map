{"version":3,"sources":["src/utils.ts","src/DFA.ts","src/transitionTable.ts","src/StringsList.ts","main.ts"],"names":[],"mappings":"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","file":"main.f09c314f.js","sourceRoot":"..","sourcesContent":["/**\n * map integer to character/Symbol, 0->a,1->b,...\n * @param i index of the character\n */\nconst intToSymbol = (i: number): string => `${String.fromCharCode(97 + i)}`\n\n// TODO: replace this with generator function\n/**\n * Generate all possible string upto a given length\n * @param symbolCount Number of symbols to use\n * @param length Max length of string\n */\nfunction generateStrings(symbolCount: number, length: number): string[] {\n    const strings: string[] = []\n\n    function recursion(length: number, s: string = \"\") {\n        strings.push(s)\n        if (length <= 0) { return }\n        for (let i = 0; i < symbolCount; i++)\n            recursion(length - 1, s + intToSymbol(i))\n    }\n    recursion(length)\n\n    return strings\n}\n\nexport { generateStrings }","import { generateStrings } from './utils'\nimport Machine from './Machine'\n\nclass DFA implements Machine {\n    statesCount: number\n    symbolCount: number\n    finalStates: number[]\n    transitionMatrix: number[][]\n\n    constructor(statesCount: number, symbolCount: number, finalStates: number[]) {\n        this.statesCount = statesCount\n        this.symbolCount = symbolCount\n        this.finalStates = finalStates\n        this.transitionMatrix = []\n        // Fill the tranistion matrix, initially has undefined\n        for (let i = 0; i < this.statesCount; i++) {\n            this.transitionMatrix.push(Array(this.symbolCount))\n        }\n    }\n\n    // set a transition\n    setTransition(state: number, symbol: number, nextState: number) {\n        this.transitionMatrix[state][symbol] = nextState\n    }\n\n    /*\n    * return all strings of length upto given limit\n    */\n    getStringsUptoLimit(limit: number): string[] {\n        const strings: string[] = []\n        for (const str of generateStrings(this.symbolCount, limit)) {\n            if (this.testString(str))\n                strings.push(str)\n        }\n        return strings\n    }\n\n    /*\n    * Test if a given string is accepted by the machine\n    */\n    testString(s: string): boolean {\n\n        let currentState = 0\n        for (let i = 0; i < s.length; i++) {\n            const symbol = s.charCodeAt(i) - 97\n            currentState = this.transitionMatrix[currentState][symbol]\n        }\n        return this.finalStates.indexOf(currentState) !== -1\n    }\n}\n\nexport default DFA","import DFA from './DFA'\n\n/**\n* class to keep track of transition table and render it in dom\n* and return a DFA / NFA object when table is complete\n */\nclass TransitionTable {\n    table: HTMLTableElement\n    modal: HTMLDivElement\n    symbolCount: number\n    stateCount: number\n\n    constructor(tableId: string, modalId: string) {\n        this.table = <HTMLTableElement>document.getElementById(tableId)\n        this.modal = <HTMLDivElement>document.getElementById(modalId)\n        this.symbolCount = 0\n        this.stateCount = 0\n        // add 2 states and symbols initially\n        this.addState()\n        this.addState()\n        this.addSymbol()\n        this.addSymbol()\n    }\n\n\n    validateDFA(): boolean {\n        if (!this.validateNFA())\n            return false\n        // check that there is only one transition per cell\n        const cells = this.table.getElementsByTagName(\"td\")\n        for (let i = 0; i < cells.length; i++)\n            if (cells[i].innerText.indexOf(\",\") !== -1)\n                return false\n        return true\n    }\n\n    getDFA(): DFA {\n        // get final states\n        const finalStates: number[] = []\n        for (const cell of this.table.getElementsByTagName('td')) {\n            if (cell.innerText.indexOf(\"*\") !== -1)\n                finalStates.push(parseInt(cell.innerText))\n        }\n\n        // construct dfa object\n        const dfa = new DFA(this.stateCount, this.symbolCount, finalStates)\n\n        // set the transitions\n        for (const cell of this.table.getElementsByTagName('td')) {\n            if (cell.id.indexOf(\";\") !== -1) {\n                const [state, symbol] = cell.id.split(\";\").map(s => parseInt(s))\n                const nextState = parseInt(cell.innerText)\n                dfa.setTransition(state, symbol, nextState)\n            }\n        }\n\n        return dfa\n    }\n\n    validateNFA(): boolean {\n        // check if all the transitions are complete .i.e cell.innerText!==\"-\"\n        const cells = this.table.getElementsByTagName(\"td\")\n        for (let i = 0; i < cells.length; i++)\n            if (cells[i].innerText === \"-\")\n                return false\n        return true\n    }\n\n    getNFA = () => { }\n\n    /**\n     * Convert the string(cell.innerText) to Array of span elements to render\n     * @param s String present in the cell ex, \"-\", \"0\", \"0,1\"\n     */\n    stringToSelected(s: string): HTMLSpanElement[] {\n        const selected = (s !== \"-\") ? s.split(',') : []\n\n        return Array(this.stateCount).fill(0).map((_, idx) => {\n            const elm = document.createElement(\"span\")\n            elm.innerText = idx.toString()\n            if (selected.indexOf(idx.toString()) !== -1)\n                elm.className = \"selected\"\n            elm.addEventListener(\"click\", (e: MouseEvent) => {\n                const el = (e.target as HTMLElement)\n                const className = el.className\n                if (className === \"selected\")\n                    elm.className = \"\"\n                else\n                    elm.className = \"selected\"\n            })\n            return elm\n        })\n    }\n\n    /**\n     * return string of selected states seperated by comma, will be set as cell.innerText\n     * @param states_container div element containing the states, inside transition selection modal\n     */\n    selectedToString(states_container: HTMLDivElement): string {\n        let ret = []\n        for (let i = 0; i < states_container.children.length; i++) {\n            if (states_container.children[i].className === \"selected\") ret.push((states_container.children[i] as HTMLElement).innerText)\n        }\n        if (ret.length > 0)\n            return ret.join()\n        return \"-\"\n    }\n\n    saveTransition = (cell: HTMLSpanElement, states_container: HTMLDivElement) => {\n        const string_data = this.selectedToString(states_container)\n        cell.innerText = string_data\n        this.modal.style.display = \"none\"\n    }\n\n    loadTransition = (cell: HTMLSpanElement, states_container: HTMLDivElement) => {\n\n    }\n\n    /**\n     * Callback for each transition cell, will display next state selection modal. \n     */\n    setTransition = (e: MouseEvent) => {\n        const cellId = (e.target as HTMLTableCellElement).id\n        const cell = <HTMLSpanElement>e.target\n        this.modal.style.display = \"block\";\n        const states_container = <HTMLDivElement>this.modal.querySelector(\"#transition_states\")\n        // remove child nodes\n        states_container.innerHTML = \"\"\n        // add child nodes\n        this.stringToSelected(cell.innerText).forEach(element => {\n            states_container.appendChild(element)\n        });\n\n        const saveBtnOriginal = this.modal.querySelector(\"#modal_save_btn\")\n        // Remove old listners from save button\n        const saveBtn = saveBtnOriginal.cloneNode(true)\n        this.modal.replaceChild(saveBtn, saveBtnOriginal)\n        // Add event listner to save button\n        saveBtn.addEventListener(\"click\", () => this.saveTransition(cell, states_container))\n\n    }\n\n\n    /**\n     * Create a cell(<td></td>) for transition table, `state;symbol` is used as element's id. \n     * @param x x-coordinate or state number\n     * @param y y-coordinate or symbol number\n     */\n    createCell(x: number, y: number): HTMLTableCellElement {\n        let cell = document.createElement('td');\n        cell.innerText = \"-\";\n        cell.id = `${x};${y}`\n        cell.addEventListener(\"click\", this.setTransition);\n        return cell\n    }\n\n    /**\n     * Add a new symbol to transition table, i.e. creates a new column\n     */\n    addSymbol() {\n        this.symbolCount += 1;\n        const rowhead = document.createElement('td');\n        rowhead.innerText = String.fromCharCode(this.symbolCount + 96)\n        this.table.rows[0].appendChild(rowhead);\n\n        for (let i = 1; i < this.table.rows.length; i++) {\n            const cell = this.createCell(i - 1, this.symbolCount - 1)\n            this.table.rows[i].appendChild(cell)\n        }\n\n    }\n\n\n    /**\n     * Remove last symbol from transition table, i.e. removes a column\n     */\n    removeSymbol() {\n        if (this.symbolCount >= 1) {\n            this.symbolCount -= 1\n            for (let i = 0; i < this.table.rows.length; i++) {\n                this.table.rows[i].lastElementChild.remove();\n            }\n        }\n    }\n\n    /**\n     * Add a new symbol to transition table, i.e. creates a new row\n     */\n    addState() {\n        this.table.insertRow()\n        const lastRow = this.table.rows[this.table.rows.length - 1]\n        const cell = document.createElement('td')\n        cell.innerText = this.stateCount.toString()\n        cell.addEventListener(\"click\", this.setFinalState)\n        lastRow.appendChild(cell)\n\n        for (let i = 0; i < this.table.rows[0].childElementCount - 1; i++) {\n            const cell = this.createCell(this.stateCount, i)\n            lastRow.appendChild(cell)\n        }\n        this.stateCount += 1\n    }\n\n\n    /**\n     * Remove last state from transition table, i.e. removes a row\n     */\n    removeState() {\n        if (this.stateCount > 0) {\n            this.stateCount -= 1\n            this.table.deleteRow(this.table.rows.length - 1)\n        }\n    }\n\n    /**\n     * Callback function to mark a state as final state(*), on click\n     */\n    setFinalState = (e: MouseEvent) => {\n        const cell = <HTMLElement>e.target\n        if (cell.innerText.indexOf(\"*\") !== -1) {\n            const elm = cell.querySelector(\"sup\")\n            elm.remove()\n        }\n        else {\n            const elm = document.createElement('sup')\n            elm.innerText = \"*\"\n            cell.appendChild(elm)\n        }\n    }\n}\n\nexport default TransitionTable","export default class StringsList {\n    table: HTMLDivElement\n    /**\n     * \n     * @param id id of HTMLDivElement to contain strings list\n     */\n    constructor(id: string) {\n        this.table = <HTMLDivElement>document.getElementById(id)\n    }\n\n    /**\n     * Add a string to the list\n     * @param str string to be added\n     * @param accepted boolean true if string is accepted\n     */\n    addItem(str: string, accepted: boolean): void {\n        const elm = document.createElement(\"div\")\n        elm.innerText = str || \"є\"\n        elm.className = accepted ? \"accepted\" : \"notaccepted\"\n        this.table.appendChild(elm)\n    }\n\n    /**\n     * Remove every string from the list\n     */\n    clear(): void {\n        this.table.innerHTML = \"\"\n    }\n}","import TransitionTable from './src/transitionTable'\nimport { generateStrings } from './src/utils'\nimport DFA from './src/DFA'\nimport StringsList from './src/StringsList'\n\n\nconst stringsList = new StringsList(\"strings_list\")\n\n// Global State Variables\nlet symbolCount = 0\nlet machine: DFA = undefined\n\n// HTML Elements\nconst sigmaInput = <HTMLInputElement>document.getElementById(\"sigma\")\nconst addSymbolBtn = <HTMLButtonElement>document.getElementById(\"add_symbol_btn\")\nconst removeSymbolBtn = <HTMLButtonElement>document.getElementById(\"remove_symbol_btn\")\nconst addState = <HTMLButtonElement>document.getElementById(\"add_state_btn\")\nconst removeState = <HTMLButtonElement>document.getElementById(\"remove_state_btn\")\nconst transitionSelectionModal = <HTMLDivElement>document.querySelector(\"#transition_selection_modal\")\nconst generateDfaBtn = <HTMLButtonElement>document.querySelector('#generate_dfa_btn')\nconst generateNfaBtn = <HTMLButtonElement>document.querySelector(\"#generate_nfa_btn\")\n\nconst transitionTable = new TransitionTable(\"transition_table\", \"transition_selection_modal\")\n// add 2 symbols initially\nsigmaInput.value = \"a,b\"\nsymbolCount = 2\n\n\naddSymbolBtn.addEventListener(\"click\",\n    (e: MouseEvent): void => {\n        transitionTable.addSymbol();\n        symbolCount += 1\n        if (sigmaInput.value !== \"\")\n            sigmaInput.value += \",\"\n        sigmaInput.value += `${String.fromCharCode(symbolCount + 96)}`\n    }\n)\n\nremoveSymbolBtn.addEventListener(\"click\",\n    (e: MouseEvent): void => {\n        transitionTable.removeSymbol();\n        if (symbolCount > 0)\n            symbolCount -= 1\n        sigmaInput.value = sigmaInput.value.slice(0, sigmaInput.value.length - 2)\n    }\n)\n\n\naddState.addEventListener(\"click\",\n    (e: MouseEvent) => {\n        transitionTable.addState();\n    }\n)\n\nremoveState.addEventListener(\"click\",\n    (e: MouseEvent) => {\n        transitionTable.removeState();\n    }\n)\n\ngenerateDfaBtn.addEventListener(\"click\", () => {\n    if (!transitionTable.validateDFA())\n        alert(\"Not a valid DFA\")\n    else {\n        machine = transitionTable.getDFA()\n        const acceptedStrings = machine.getStringsUptoLimit(getStringLength())\n        const allStrings = generateStrings(transitionTable.symbolCount, getStringLength())\n        stringsList.clear()\n        for (const str of allStrings) {\n            if (acceptedStrings.indexOf(str) !== -1)\n                stringsList.addItem(str, true)\n            else\n                stringsList.addItem(str, false)\n        }\n    }\n})\n\ngenerateNfaBtn.addEventListener(\"click\", () => {\n    if (!transitionTable.validateNFA())\n        alert(\"Not a valid NFA\")\n    else {\n        alert(\"NFA not yet implemented.\")\n    }\n})\n\n\nconst stringLenInput = <HTMLInputElement>document.querySelector(\"#string_len_inp\")\nconst dec_string_len_btn = <HTMLButtonElement>document.querySelector(\"#dec_string_len_btn\")\nconst inc_string_len_btn = <HTMLButtonElement>document.querySelector(\"#inc_string_len_btn\")\n\nstringLenInput.value = \"3\"\ndec_string_len_btn.addEventListener(\"click\", () => {\n    stringLenInput.value = String(parseInt(stringLenInput.value) - 1)\n})\n\ninc_string_len_btn.addEventListener(\"click\", () => {\n    stringLenInput.value = String(parseInt(stringLenInput.value) + 1)\n})\n\nconst getStringLength = (): number => parseInt(stringLenInput.value)\n"]}